#A
class Dog:
    def __init__(self, age, name):
        self.age = age
        self.name = name


def main():
    rexi = Dog(3, "rexi")
    print(rexi.age)


if __name__ == "__main__":
    main()

#B answer is 3

#C
class Car:
    @staticmethod
    def start():
        print("on")


if __name__ == "__main__":
    Car.start()

#D
class Huskey(Dog):
    def __init__(self, age, name):
        super().__init__(age, name)


    def howl(self):
        print("ahooo")


if __name__ == "__main__":
   jo = Huskey(2,"jo")
   jo.howl()


#E
class BlackHuskey(Huskey):
    def __init__(self, age, name):
        super().__init__(age, name)

    def return_color(self):
        return "black"


if __name__ == "__main__":
    blacky = BlackHuskey(2,"jo")
    color = blacky.return_color()


# F.a - Method call is statically, but method is not static
# F.b - add a static decoration to bark / call bark through an object of Dog
#G.a
import array as arr
if __name__ == "__main__":
    a = arr.array("i",[3,6,9])
    for temp_num in a:
        print(temp_num)


#G.b
if __name__ == "__main__":
    a = Dog(5, "John")
    b = Dog(8, "Joe")
    c = Dog(12, "George")
    dogs_list = [a, b, c]

    for x in range (len(dogs_list)):
        print(dogs_list[x].name)